// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: hello.proto

package hello

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HiServiceClient is the client API for HiService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HiServiceClient interface {
	SayHi(ctx context.Context, in *HiRequest, opts ...grpc.CallOption) (*HiReply, error)
}

type hiServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHiServiceClient(cc grpc.ClientConnInterface) HiServiceClient {
	return &hiServiceClient{cc}
}

func (c *hiServiceClient) SayHi(ctx context.Context, in *HiRequest, opts ...grpc.CallOption) (*HiReply, error) {
	out := new(HiReply)
	err := c.cc.Invoke(ctx, "/HiService/SayHi", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HiServiceServer is the server API for HiService service.
// All implementations must embed UnimplementedHiServiceServer
// for forward compatibility
type HiServiceServer interface {
	SayHi(context.Context, *HiRequest) (*HiReply, error)
	mustEmbedUnimplementedHiServiceServer()
}

// UnimplementedHiServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHiServiceServer struct {
}

func (UnimplementedHiServiceServer) SayHi(context.Context, *HiRequest) (*HiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHi not implemented")
}
func (UnimplementedHiServiceServer) mustEmbedUnimplementedHiServiceServer() {}

// UnsafeHiServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HiServiceServer will
// result in compilation errors.
type UnsafeHiServiceServer interface {
	mustEmbedUnimplementedHiServiceServer()
}

func RegisterHiServiceServer(s grpc.ServiceRegistrar, srv HiServiceServer) {
	s.RegisterService(&HiService_ServiceDesc, srv)
}

func _HiService_SayHi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HiServiceServer).SayHi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/HiService/SayHi",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HiServiceServer).SayHi(ctx, req.(*HiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HiService_ServiceDesc is the grpc.ServiceDesc for HiService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HiService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "HiService",
	HandlerType: (*HiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHi",
			Handler:    _HiService_SayHi_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hello.proto",
}
